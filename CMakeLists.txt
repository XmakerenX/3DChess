project(GlxOpenGL)
cmake_minimum_required(VERSION 3.2)
# make cmake find our findFBX.cmake
LIST(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR})

set(CHESS_ENGINE_NAME "ChessEngine")
set(ENGINE_NAME "Engine")
set(EDITOR_EXE_NAME "Editor")
set(TEST_EXE_NAME "Test")

message("Loading libraries")
find_package(OpenGL REQUIRED)
find_package(freetype REQUIRED)
find_package(boost REQUIRED)
find_package(GLEW REQUIRED)
find_package(PNG REQUIRED)
find_package(JPEG REQUIRED)
find_package(FBX REQUIRED)

include_directories(${FREETPYE_INCLUDE_DIRS})
include_directories(${Boost_INCLUDE_DIRS})
include_directories(${GLEW_INCLUDE_DIR})
include_directories(${PNG_INCLUDE_DIRS})
include_directories(${JPEG_INCLUDE_DIRS})
include_directories(${FBXSDK_INCLUDE_DIR})

aux_source_directory(. SRC_LIST)
aux_source_directory(./GUI SRC_LIST)
aux_source_directory(./ChessEngine/ CHESS_SRC_LIST)
aux_source_directory(./Main MAIN_SRC_LIST)
aux_source_directory(./Editor EDITOR_SRC_LIST)
aux_source_directory(./Test/ TEST_SRC_LIST)
if (WIN32)
	aux_source_directory(./Windows SRC_LIST)
	aux_source_directory(./Main/Windows MAIN_SRC_LIST)
	aux_source_directory(./Editor/Windows EDITOR_SRC_LIST)
	aux_source_directory(./Test/Windows TEST_SRC_LIST)
else()
	aux_source_directory(./Linux SRC_LIST)
	aux_source_directory(./Main/Linux MAIN_SRC_LIST)
	aux_source_directory(./Editor/Linux EDITOR_SRC_LIST)
	aux_source_directory(./Test/Linux TEST_SRC_LIST)
endif(WIN32)

add_library(${CHESS_ENGINE_NAME} ${CHESS_SRC_LIST})

add_library(${ENGINE_NAME} ${SRC_LIST})
target_link_libraries(${ENGINE_NAME} ${OPENGL_LIBRARIES})
target_link_libraries(${ENGINE_NAME} ${FREETYPE_LIBRARIES})
target_link_libraries(${ENGINE_NAME} ${GLEW_LIBRARIES})
target_link_libraries(${ENGINE_NAME} ${PNG_LIBRARIES})
target_link_libraries(${ENGINE_NAME} ${JPEG_LIBRARIES})
if (CMAKE_BUILD_TYPE STREQUAL "Debug")
	target_link_libraries(${ENGINE_NAME} ${FBXSDK_LIBRARY_DEBUG})
else()
	target_link_libraries(${ENGINE_NAME} ${FBXSDK_LIBRARY})
endif(CMAKE_BUILD_TYPE STREQUAL "Debug")

if (WIN32)
	add_executable(${PROJECT_NAME} WIN32 ${MAIN_SRC_LIST})
	add_executable(${EDITOR_EXE_NAME} WIN32 ${EDITOR_SRC_LIST})
	add_executable(${TEST_EXE_NAME} WIN32 ${TEST_SRC_LIST})
else()
	add_executable(${PROJECT_NAME} ${MAIN_SRC_LIST})
	add_executable(${EDITOR_EXE_NAME} ${EDITOR_SRC_LIST})
	add_executable(${TEST_EXE_NAME} ${TEST_SRC_LIST})
endif(WIN32)

target_link_libraries(${PROJECT_NAME} ${CHESS_ENGINE_NAME})
target_link_libraries(${PROJECT_NAME} ${ENGINE_NAME})
target_link_libraries(${EDITOR_EXE_NAME} ${ENGINE_NAME}) 
target_link_libraries(${TEST_EXE_NAME} ${ENGINE_NAME})
